---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.1-0.20211110210727-ab52f76cc7d1
  creationTimestamp: null
  name: microvmclusters.infrastructure.cluster.x-k8s.io
spec:
  group: infrastructure.cluster.x-k8s.io
  names:
    categories:
    - cluster-api
    kind: MicrovmCluster
    listKind: MicrovmClusterList
    plural: microvmclusters
    shortNames:
    - mvmc
    singular: microvmcluster
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Cluster to which this MicrovmCluster belongs
      jsonPath: .metadata.labels.cluster\.x-k8s\.io/cluster-name
      name: Cluster
      type: string
    - description: Cluster infrastructure is ready
      jsonPath: .status.ready
      name: Ready
      type: string
    - description: API Endpoint
      jsonPath: .spec.controlPlaneEndpoint[0]
      name: ControlPlaneEndpoint
      priority: 1
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: MicrovmCluster is the Schema for the microvmclusters API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MicrovmClusterSpec defines the desired state of MicrovmCluster.
            properties:
              controlPlaneEndpoint:
                description: "ControlPlaneEndpoint represents the endpoint used to
                  communicate with the control plane. \n See https://cluster-api.sigs.k8s.io/developer/architecture/controllers/cluster.html
                  for more details."
                properties:
                  host:
                    description: The hostname on which the API server is serving.
                    type: string
                  port:
                    description: The port on which the API server is serving.
                    format: int32
                    type: integer
                required:
                - host
                - port
                type: object
              microvmProxy:
                description: MicrovmProxy is the proxy server details to use when
                  calling the microvm service. This is an alteranative to using the
                  http proxy environment variables and applied purely to the grpc
                  service.
                properties:
                  endpoint:
                    description: Endpoint is the address of the proxy.
                    type: string
                required:
                - endpoint
                type: object
              placement:
                description: Placement specifies how machines for the cluster should
                  be placed onto hosts (i.e. where the microvms are created).
                properties:
                  staticPool:
                    description: StaticPool is used to specify that static pool placement
                      should be used.
                    properties:
                      basicAuthSecret:
                        description: "BasicAuthSecret is the name of the secret containing
                          basic auth info for each host listed in Hosts. The secret
                          should be created in the same namespace as the Cluster.
                          The secret should contain a data entry for each host Endpoint
                          without the port: \n apiVersion: v1 kind: Secret metadata:
                          name: mybasicauthsecret namespace: same-as-cluster type:
                          Opaque data: 1.2.4.5: YWRtaW4= myhost: MWYyZDFlMmU2N2Rm"
                        type: string
                      hosts:
                        description: Hosts defines the pool of hosts that should be
                          used when creating microvms. The hosts will be supplied
                          to CAPI (as fault domains) and it will place machines across
                          them.
                        items:
                          properties:
                            controlplaneAllowed:
                              default: true
                              description: ControlPlaneAllowed marks this host as
                                suitable for running control plane nodes in addition
                                to worker nodes.
                              type: boolean
                            endpoint:
                              description: Endpoint is the API endpoint for the microvm
                                service (i.e. flintlock).
                              type: string
                            name:
                              description: Name is an optional name for the host.
                              type: string
                          required:
                          - controlplaneAllowed
                          - endpoint
                          type: object
                        minItems: 1
                        type: array
                    required:
                    - hosts
                    type: object
                type: object
              sshPublicKeys:
                description: SSHPublicKeys is a list of SSHPublicKeys and their associated
                  users. If specified these keys will be applied to all machine created
                  unless you specify different keys at the machine level.
                items:
                  properties:
                    authorizedKeys:
                      description: AuthorizedKeys is a list of public keys to add
                        to the user
                      items:
                        type: string
                      type: array
                    user:
                      description: User is the name of the user to add keys for (eg
                        root, ubuntu).
                      type: string
                  type: object
                type: array
              tlsSecretRef:
                description: "mTLS Configuration: \n It is recommended that each flintlock
                  host is configured with its own cert signed by a common CA, and
                  set to use mTLS. The CAPMVM client should be provided with the CA,
                  and a client cert and key signed by that CA. TLSSecretRef is a reference
                  to the name of a secret which contains TLS cert information for
                  connecting to Flintlock hosts. The secret should be created in the
                  same namespace as the MicroVMCluster. The secret should be of type
                  kubernetes.io/tls https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets
                  with the addition of a ca.crt key. \n apiVersion: v1 kind: Secret
                  metadata: name: secret-tls namespace: default  <- same as Cluster
                  type: kubernetes.io/tls data: tls.crt: | MIIC2DCCAcCgAwIBAgIBATANBgkqh
                  ... tls.key: | MIIEpgIBAAKCAQEA7yn3bRHQ5FHMQ ... ca.crt: | MIIEpgIBAAKCAQEA7yn3bRHQ5FHMQ
                  ..."
                type: string
            required:
            - placement
            type: object
          status:
            description: MicrovmClusterStatus defines the observed state of MicrovmCluster.
            properties:
              conditions:
                description: Conditions defines current service state of the MicrovmCluster.
                items:
                  description: Condition defines an observation of a Cluster API resource
                    operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another. This should be when the underlying condition changed.
                        If that is not known, then using the time when the API field
                        changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about
                        the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition
                        in CamelCase. The specific API may choose whether or not this
                        field is considered a guaranteed API. This field may not be
                        empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of
                        Reason code, so the users or machines can immediately understand
                        the current situation and act accordingly. The Severity field
                        MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                        Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important.
                      type: string
                  required:
                  - lastTransitionTime
                  - status
                  - type
                  type: object
                type: array
              failureDomains:
                additionalProperties:
                  description: FailureDomainSpec is the Schema for Cluster API failure
                    domains. It allows controllers to understand how many failure
                    domains a cluster can optionally span across.
                  properties:
                    attributes:
                      additionalProperties:
                        type: string
                      description: Attributes is a free form map of attributes an
                        infrastructure provider might use or require.
                      type: object
                    controlPlane:
                      description: ControlPlane determines if this failure domain
                        is suitable for use by control plane machines.
                      type: boolean
                  type: object
                description: FailureDomains is a list of the failure domains that
                  CAPI should spread the machines across. For the CAPMVM provider
                  this equates to host machines that can run microvms using Flintlock.
                type: object
              ready:
                default: false
                description: Ready indicates that the cluster is ready.
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
